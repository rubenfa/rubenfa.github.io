---
import { LOCALES, useTranslations, type Lang } from "@/i18n";
import Layout from "@/layouts/Base.astro";
import { getCollection } from "astro:content";

const { page } = Astro.params;
const currentPage = parseInt(page);
const postsPerPage = 10;

const locale = Astro.currentLocale as Lang;
const t = useTranslations(locale);

const allPosts = (await getCollection("blog"))
  .filter((post) => post.slug.split("/")[0] === locale)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

const totalPages = Math.ceil(allPosts.length / postsPerPage);
const posts = allPosts.slice(
  (currentPage - 1) * postsPerPage,
  currentPage * postsPerPage
);

export const getStaticPaths = async () => {
  const allPosts = await getCollection("blog");
  const postsByLang = Object.keys(LOCALES).map((lang) => ({
    lang,
    posts: allPosts.filter((post) => post.slug.split("/")[0] === lang),
  }));

  return postsByLang.flatMap(({ lang, posts }) => {
    const totalPages = Math.ceil(posts.length / 10);
    return Array.from({ length: totalPages }, (_, i) => ({
      params: { lang, page: `${i + 1}` },
    }));
  });
};

const title = t({
  en: "Blog",
  es: "Blog",
});
---

<Layout {title}>
  <ul class="post-list">
    {
      posts.map((post) => {
        const [, ...slug] = post.slug.split("/");
        return (
          <li>
            <a href={`/${locale}/blog/${slug.join("/")}/`}>
              <p class="post-date">
                <span class="icon-date"></span>
                {post.data.date.toLocaleDateString(locale)}
              </p>
              <h2>{post.data.title}</h2>
            </a>
          </li>
        );
      })
    }
  </ul>

  <nav class="pagination">
    {currentPage > 1 && (
      <a href={`/${locale}/blog/${currentPage - 1}`}>Previous</a>
    )}
    <span>
      Page {currentPage} of {totalPages}
    </span>
    {currentPage < totalPages && (
      <a href={`/${locale}/blog/${currentPage + 1}`}>Next</a>
    )}
  </nav>
</Layout>

<style>
  p {
    margin-block-start: var(--sp-s);
  }
  ul.post-list {
    margin-block-start: var(--sp-m);
    list-style: none;
    padding: 0;
  }

  ul.post-list li {
    margin-block-end: var(--sp-s);
    border-bottom: 1px solid var(--color-border); /* L√≠nea separadora entre posts */
    padding-bottom: var(--sp-s);
  }

  /* Definir la variable --color-border si no est√° definida */
  :root {
    --color-border: #ccc; /* Puedes cambiar #ccc por el color que prefieras */
  }

  ul.post-list li a {
    display: block;
    text-decoration: none;
  }

  .pagination {
    margin-top: var(--sp-m);
    display: flex;
    gap: var(--sp-s);
    justify-content: center;
    align-items: center;
  }
  h2 {
    font-size: 1.5rem; /* Reducir el tama√±o de fuente */
    transition: color 0.3s;
    word-break: break-word; /* Permitir saltos de l√≠nea dentro de palabras largas */
    hyphens: auto; /* Habilitar guiones autom√°ticos */
    font-weight: normal; /* Texto del t√≠tulo sin negrita */
  }
  a:hover h2 {
    color: var(--color-accent);
  }
  .post-date {
    font-size: 0.9rem;
    color: var(--color-secondary);
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  .icon-date::before {
    content: "üóìÔ∏è";
    margin-right: 0.5rem;
  }
</style>